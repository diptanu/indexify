use crate::index::IndexManager;
use crate::persistence::Text;
use crate::repository_manager::{self, DataRepositoryManager};
use crate::text_splitters::TextSplitterKind;
use crate::{CreateIndexParams, EmbeddingRouter, MemoryManager, Message, MetricKind, ServerConfig};

use anyhow::Result;
use axum::http::StatusCode;
use axum::response::{IntoResponse, Response};
use axum::{extract::State, routing::get, routing::post, Json, Router};
use pyo3::Python;
use tokio::signal;
use tracing::info;

use serde::{Deserialize, Serialize};
use smart_default::SmartDefault;
use std::collections::HashMap;
use uuid::Uuid;

use std::net::SocketAddr;
use std::str::FromStr;
use std::sync::Arc;

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename = "extractor_type")]
enum ApiExtractorType {
    #[serde(rename = "embedding")]
    Embedding {
        model: String,
        //TODO: Rename this to distance
        metric: IndexMetric,
        text_splitter: ApiTextSplitterKind,
    },
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename = "extractor")]
struct ApiExtractor {
    pub name: String,
    pub extractor_type: ApiExtractorType,
}

#[derive(Default, Debug, Clone, Serialize, Deserialize)]
struct ApiDataRepository {
    pub name: String,
    pub extractors: Vec<ApiExtractor>,
    pub metadata: HashMap<String, serde_json::Value>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
struct SyncRepository {
    pub name: String,
    pub extractors: Vec<ApiExtractor>,
    pub metadata: HashMap<String, serde_json::Value>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
struct SyncRepositoryResponse {}

#[derive(Debug, Clone, Serialize, Deserialize)]
struct GetRepository {
    pub name: String,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
struct GetRepositoryResponse {
    pub repository: ApiDataRepository,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
struct ListRepositories {}

#[derive(Debug, Clone, Serialize, Deserialize)]
struct ListRepositoriesResponse {
    pub repositories: Vec<ApiDataRepository>,
}

#[derive(Debug, Serialize, Deserialize)]
struct GenerateEmbeddingRequest {
    /// Input texts for which embeddings will be generated.
    inputs: Vec<String>,
    /// Name of the model to use for generating embeddings.
    model: String,
}

/// Response payload for generating text embeddings.
#[derive(Debug, Serialize, Deserialize)]
struct GenerateEmbeddingResponse {
    embeddings: Option<Vec<Vec<f32>>>,
}

/// An embedding model and its properties.
#[derive(Debug, Serialize, Deserialize)]
struct EmbeddingModel {
    /// Name of the embedding model.
    name: String,
    /// Number of dimensions in the embeddings generated by this model.
    dimensions: u64,
}

/// Response payload for listing available embedding models.
#[derive(Debug, Serialize, Deserialize)]
struct ListEmbeddingModelsResponse {
    /// List of available embedding models.
    models: Vec<EmbeddingModel>,
}

#[derive(SmartDefault, Debug, Serialize, Deserialize, strum::Display, Clone)]
#[strum(serialize_all = "snake_case")]
enum ApiTextSplitterKind {
    // Do not split text.
    #[serde(rename = "none")]
    None,

    /// Split text by new lines.
    #[default]
    #[serde(rename = "new_line")]
    NewLine,

    /// Split a document across the regex boundary
    #[serde(rename = "regex")]
    Regex { pattern: String },
}

#[derive(Debug, Serialize, Deserialize, Clone)]
#[serde(rename = "metric")]
enum IndexMetric {
    #[serde(rename = "dot")]
    Dot,

    #[serde(rename = "cosine")]
    Cosine,

    #[serde(rename = "euclidean")]
    Euclidean,
}

/// Request payload for creating a new vector index.
#[derive(Debug, Serialize, Deserialize, Clone)]
struct IndexCreateRequest {
    /// Name of the new vector index.
    name: String,
    /// Name of the embedding model to use for indexing.
    embedding_model: String,
    /// Number of dimensions in the embeddings generated by the embedding model.
    metric: IndexMetric,
    /// The text splitter to use for splitting text into fragments.
    text_splitter: ApiTextSplitterKind,

    /// Hash on these parameters
    hash_on: Option<Vec<String>>,
}

#[derive(Debug, Serialize, Deserialize, Default)]
struct IndexCreateResponse {}

struct IndexCreationArgs {
    index_params: CreateIndexParams,
    text_splitter: TextSplitterKind,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Document {
    pub text: String,
    pub metadata: HashMap<String, String>,
}

#[derive(Debug, Serialize, Deserialize)]
struct AddTextsRequest {
    index: String,
    documents: Vec<Document>,
}

#[derive(Debug, Serialize, Deserialize, Default)]
struct IndexAdditionResponse {
    sequence: u64,
}

#[derive(Debug, Serialize, Deserialize)]
struct SearchRequest {
    index: String,
    query: String,
    k: u64,
}

#[derive(Debug, Serialize, Deserialize)]
struct CreateMemorySessionRequest {
    session_id: Option<Uuid>,
    index_args: IndexCreateRequest,
    metadata: Option<HashMap<String, String>>,
}

#[derive(Serialize, Deserialize)]
struct CreateMemorySessionResponse {
    session_id: Uuid,
}

#[derive(Debug, Serialize, Deserialize)]
struct MemorySessionAddRequest {
    session_id: Uuid,
    messages: Vec<Message>,
}

#[derive(Serialize, Deserialize)]
struct MemorySessionAddResponse {}

#[derive(Debug, Serialize, Deserialize)]
struct MemorySessionRetrieveRequest {
    session_id: Uuid,
}

#[derive(Serialize, Deserialize)]
struct MemorySessionRetrieveResponse {
    messages: Vec<Message>,
}

#[derive(Debug, Serialize, Deserialize)]
struct MemorySessionSearchRequest {
    session_id: Uuid,
    query: String,
    k: u64,
}

#[derive(Serialize, Deserialize)]
struct MemorySessionSearchResponse {
    messages: Vec<Message>,
}

#[derive(Debug, Serialize, Deserialize, Default)]
struct DocumentFragment {
    text: String,
    metadata: serde_json::Value,
}

#[derive(Debug, Serialize, Deserialize, Default)]
struct IndexSearchResponse {
    results: Vec<DocumentFragment>,
}

pub struct IndexifyAPIError {
    status_code: StatusCode,
    message: String,
}

impl IndexifyAPIError {
    fn new(status_code: StatusCode, message: String) -> Self {
        Self {
            status_code,
            message,
        }
    }
}

impl IntoResponse for IndexifyAPIError {
    fn into_response(self) -> Response {
        (self.status_code, self.message).into_response()
    }
}

#[derive(Clone)]
pub struct IndexEndpointState {
    index_manager: Arc<IndexManager>,
    embedding_router: Arc<EmbeddingRouter>,
}

#[derive(Clone)]
pub struct MemoryEndpointState {
    memory_manager: Arc<MemoryManager>,
    embedding_router: Arc<EmbeddingRouter>,
}

#[derive(Clone)]
pub struct RepositoryEndpointState {
    repository_manager: Arc<DataRepositoryManager>,
}

pub struct Server {
    addr: SocketAddr,
    config: Arc<ServerConfig>,
}
impl Server {
    pub fn new(config: Arc<super::server_config::ServerConfig>) -> Result<Self> {
        let addr: SocketAddr = config.listen_addr.parse()?;
        Ok(Self { addr, config })
    }

    pub async fn run(&self) -> Result<()> {
        let embedding_router = Arc::new(EmbeddingRouter::new(self.config.clone())?);
        let repository_manager = DataRepositoryManager::new(&self.config.db_url).await?;
        let respository_endpoint_state = RepositoryEndpointState {
            repository_manager: Arc::new(repository_manager),
        };
        let index_manager = Arc::new(
            IndexManager::new(
                self.config.index_config.clone(),
                embedding_router.clone(),
                self.config.db_url.clone(),
            )
            .await?,
        );
        let memory_manager = Arc::new(MemoryManager::new(index_manager.clone()).await?);
        let index_state = IndexEndpointState {
            index_manager: index_manager,
            embedding_router: embedding_router.clone(),
        };
        let memory_state = MemoryEndpointState {
            memory_manager: memory_manager.clone(),
            embedding_router: embedding_router.clone(),
        };
        let app = Router::new()
            .route("/", get(root))
            .route(
                "/embeddings/models",
                get(list_embedding_models).with_state(embedding_router.clone()),
            )
            .route(
                "/embeddings/generate",
                get(generate_embedding).with_state(embedding_router.clone()),
            )
            .route(
                "/index/create",
                post(index_create).with_state(index_state.clone()),
            )
            .route(
                "/index/add",
                post(add_texts).with_state(index_state.clone()),
            )
            .route(
                "/index/search",
                get(index_search).with_state(index_state.clone()),
            )
            .route(
                "/memory/create",
                get(create_memory_session).with_state(memory_state.clone()),
            )
            .route(
                "/memory/add",
                get(add_to_memory_session).with_state(memory_manager.clone()),
            )
            .route(
                "/memory/get",
                get(get_from_memory_session).with_state(memory_manager.clone()),
            )
            .route(
                "/memory/search",
                get(search_memory_session).with_state(memory_manager.clone()),
            )
            .route(
                "/repository/sync",
                post(sync_repository).with_state(respository_endpoint_state.clone()),
            )
            .route(
                "/repository/list",
                post(list_repositories).with_state(respository_endpoint_state.clone()),
            )
            .route(
                "/repository/get",
                post(get_repository).with_state(respository_endpoint_state.clone()),
            );
        info!("server is listening at addr {:?}", &self.addr.to_string());
        axum::Server::bind(&self.addr)
            .serve(app.into_make_service())
            .with_graceful_shutdown(shutdown_signal())
            .await?;
        Ok(())
    }
}

async fn root() -> &'static str {
    "Indexify Server"
}

#[axum_macros::debug_handler]
async fn sync_repository(
    State(state): State<RepositoryEndpointState>,
    Json(payload): Json<SyncRepository>,
) -> Result<Json<SyncRepositoryResponse>, IndexifyAPIError> {
    Ok(Json(SyncRepositoryResponse {}))
}

async fn list_repositories(
    State(state): State<RepositoryEndpointState>,
    Json(payload): Json<ListRepositories>,
) -> Result<Json<ListRepositoriesResponse>, IndexifyAPIError> {
    Ok(Json(ListRepositoriesResponse {
        repositories: vec![],
    }))
}

async fn get_repository(
    State(state): State<RepositoryEndpointState>,
    Json(payload): Json<GetRepository>,
) -> Result<Json<GetRepositoryResponse>, IndexifyAPIError> {
    Ok(Json(GetRepositoryResponse {
        repository: ApiDataRepository {
            name: "test".to_string(),
            ..Default::default()
        },
    }))
}

async fn get_index_creation_args(
    embedding_router: Arc<EmbeddingRouter>,
    payload: IndexCreateRequest,
) -> Result<IndexCreationArgs, IndexifyAPIError> {
    let model = embedding_router
        .get_model(payload.embedding_model)
        .map_err(|e| IndexifyAPIError::new(StatusCode::BAD_REQUEST, e.to_string()))?;
    let index_params = CreateIndexParams {
        name: payload.name,
        vector_dim: model.dimensions(),
        metric: match payload.metric {
            IndexMetric::Cosine => MetricKind::Cosine,
            IndexMetric::Dot => MetricKind::Dot,
            IndexMetric::Euclidean => MetricKind::Euclidean,
        },
        unique_params: payload.hash_on,
    };
    let splitter_kind = TextSplitterKind::from_str(&payload.text_splitter.to_string()).unwrap();
    Ok(IndexCreationArgs {
        index_params: index_params,
        text_splitter: splitter_kind,
    })
}

#[axum_macros::debug_handler]
async fn index_create(
    State(state): State<IndexEndpointState>,
    Json(payload): Json<IndexCreateRequest>,
) -> Result<Json<IndexCreateResponse>, IndexifyAPIError> {
    let args = get_index_creation_args(state.embedding_router.clone(), payload.clone()).await?;

    let result = state
        .index_manager
        .create_index(
            args.index_params,
            payload.embedding_model,
            args.text_splitter,
        )
        .await;

    if let Err(err) = result {
        return Err(IndexifyAPIError::new(
            StatusCode::INTERNAL_SERVER_ERROR,
            err.to_string(),
        ));
    }
    Ok(Json(IndexCreateResponse {}))
}

#[axum_macros::debug_handler]
async fn add_texts(
    State(state): State<IndexEndpointState>,
    Json(payload): Json<AddTextsRequest>,
) -> Result<Json<IndexAdditionResponse>, IndexifyAPIError> {
    let may_be_index = state
        .index_manager
        .load(payload.index)
        .await
        .map_err(|e| IndexifyAPIError::new(StatusCode::INTERNAL_SERVER_ERROR, e.to_string()))?;

    let index = may_be_index.ok_or(IndexifyAPIError::new(
        StatusCode::BAD_REQUEST,
        "index doesn't exist".into(),
    ))?;
    let texts = payload
        .documents
        .iter()
        .map(|d| Text {
            text: d.text.to_owned(),
            metadata: d.metadata.to_owned(),
        })
        .collect();
    let result = index.add_texts(texts).await;
    if let Err(err) = result {
        return Err(IndexifyAPIError::new(
            StatusCode::BAD_REQUEST,
            err.to_string(),
        ));
    }

    Ok(Json(IndexAdditionResponse::default()))
}

#[axum_macros::debug_handler]
async fn create_memory_session(
    State(state): State<MemoryEndpointState>,
    Json(payload): Json<CreateMemorySessionRequest>,
) -> Result<Json<CreateMemorySessionResponse>, IndexifyAPIError> {
    let args =
        get_index_creation_args(state.embedding_router.clone(), payload.index_args.clone()).await?;

    let session_id = state
        .memory_manager
        .create_session_index(
            payload.session_id,
            args.index_params,
            payload.index_args.embedding_model,
            args.text_splitter,
            payload.metadata,
        )
        .await
        .map_err(|e| IndexifyAPIError::new(StatusCode::INTERNAL_SERVER_ERROR, e.to_string()))?;

    Ok(Json(CreateMemorySessionResponse { session_id }))
}

#[axum_macros::debug_handler]
async fn add_to_memory_session(
    State(memory_manager): State<Arc<MemoryManager>>,
    Json(payload): Json<MemorySessionAddRequest>,
) -> Result<Json<MemorySessionAddResponse>, IndexifyAPIError> {
    memory_manager
        .add_messages(payload.session_id, payload.messages)
        .await
        .map_err(|e| IndexifyAPIError::new(StatusCode::INTERNAL_SERVER_ERROR, e.to_string()))?;

    Ok(Json(MemorySessionAddResponse {}))
}

#[axum_macros::debug_handler]
async fn get_from_memory_session(
    State(memory_manager): State<Arc<MemoryManager>>,
    Json(payload): Json<MemorySessionRetrieveRequest>,
) -> Result<Json<MemorySessionRetrieveResponse>, IndexifyAPIError> {
    let messages = memory_manager
        .retrieve_messages(payload.session_id)
        .await
        .map_err(|e| IndexifyAPIError::new(StatusCode::INTERNAL_SERVER_ERROR, e.to_string()))?;

    Ok(Json(MemorySessionRetrieveResponse { messages }))
}

#[axum_macros::debug_handler]
async fn search_memory_session(
    State(memory_manager): State<Arc<MemoryManager>>,
    Json(payload): Json<MemorySessionSearchRequest>,
) -> Result<Json<MemorySessionSearchResponse>, IndexifyAPIError> {
    let messages = memory_manager
        .search(payload.session_id, payload.query, payload.k)
        .await
        .map_err(|e| IndexifyAPIError::new(StatusCode::INTERNAL_SERVER_ERROR, e.to_string()))?;

    Ok(Json(MemorySessionSearchResponse { messages }))
}

#[axum_macros::debug_handler]
async fn index_search(
    State(state): State<IndexEndpointState>,
    Json(query): Json<SearchRequest>,
) -> Result<Json<IndexSearchResponse>, IndexifyAPIError> {
    let try_index = state.index_manager.load(query.index.clone()).await;
    if let Err(err) = try_index {
        return Err(IndexifyAPIError::new(
            StatusCode::INTERNAL_SERVER_ERROR,
            err.to_string(),
        ));
    }
    if try_index.as_ref().unwrap().is_none() {
        return Err(IndexifyAPIError::new(
            StatusCode::BAD_REQUEST,
            "index does not exist".into(),
        ));
    }
    let index = try_index.unwrap().unwrap();
    let results = index.search(query.query, query.k).await;
    if let Err(err) = results {
        return Err(IndexifyAPIError::new(
            StatusCode::INTERNAL_SERVER_ERROR,
            err.to_string(),
        ));
    }
    let document_fragments: Vec<DocumentFragment> = results
        .unwrap()
        .iter()
        .map(|text| DocumentFragment {
            text: text.texts.to_owned(),
            metadata: text.metadata.to_owned(),
        })
        .collect();
    Ok(Json(IndexSearchResponse {
        results: document_fragments,
    }))
}

#[axum_macros::debug_handler]
async fn list_embedding_models(
    State(embedding_router): State<Arc<EmbeddingRouter>>,
) -> Json<ListEmbeddingModelsResponse> {
    let model_names = embedding_router.list_models();
    let mut models: Vec<EmbeddingModel> = Vec::new();
    for model_name in model_names {
        let model = embedding_router.get_model(model_name.clone()).unwrap();
        models.push(EmbeddingModel {
            name: model_name.clone(),
            dimensions: model.dimensions(),
        })
    }
    Json(ListEmbeddingModelsResponse { models })
}

#[axum_macros::debug_handler]
async fn generate_embedding(
    State(embedding_router): State<Arc<EmbeddingRouter>>,
    Json(payload): Json<GenerateEmbeddingRequest>,
) -> Result<Json<GenerateEmbeddingResponse>, IndexifyAPIError> {
    let try_embedding_generator = embedding_router.get_model(payload.model);
    if let Err(err) = &try_embedding_generator {
        return Err(IndexifyAPIError::new(
            StatusCode::NOT_ACCEPTABLE,
            err.to_string(),
        ));
    }
    let embeddings = try_embedding_generator
        .unwrap()
        .generate_embeddings(payload.inputs)
        .await;

    if let Err(err) = embeddings {
        return Err(IndexifyAPIError::new(
            StatusCode::EXPECTATION_FAILED,
            err.to_string(),
        ));
    }

    Ok(Json(GenerateEmbeddingResponse {
        embeddings: Some(embeddings.unwrap()),
    }))
}

async fn shutdown_signal() {
    let ctrl_c = async {
        signal::ctrl_c()
            .await
            .expect("failed to install Ctrl+C handler");
    };

    #[cfg(unix)]
    let terminate = async {
        signal::unix::signal(signal::unix::SignalKind::terminate())
            .expect("failed to install signal handler")
            .recv()
            .await;
    };

    #[cfg(not(unix))]
    let terminate = std::future::pending::<()>();

    tokio::select! {
        _ = ctrl_c => {
            let _ = Python::with_gil(|py| py.check_signals());
        },
        _ = terminate => {
            let _ = Python::with_gil(|py| py.check_signals());
        },
    }
    info!("signal received, shutting down server gracefully");
}
